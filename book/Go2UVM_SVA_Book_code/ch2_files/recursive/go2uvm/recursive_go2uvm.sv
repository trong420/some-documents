/********************************************
* VerifWorks Go2UVM App: VW_DVC_Go2UVM
* Automatically generated by VerifWorks's DVC_Go2UVM Riviera Apps 
* Thanks for using VerifWorks products
* Visit http://www.verifworks.com for more 
* Generated on   : 2016-06-04 14:23:40
********************************************/ 



// Generating SystemVerilog interface for module: recursive
// ---------------------------------------------------------
interface recursive_if (input logic clk);
  logic  [0:0] ack;
  logic  [0:0] reset_n;
  logic  [0:0] done;
  logic  [0:0] parity_error;
  logic  [0:0] req;
  logic  [0:0] transfer_envelope;
  // End of interface signals 


  // Start of clocking block definition 
  clocking cb @(posedge clk);
    output ack;
    output reset_n;
    output done;
    output parity_error;
    output req;
    output transfer_envelope;
  endclocking : cb
  // End of clocking block definition 

endinterface : recursive_if
// Automatically generated from VerifWorks's DVCreate-Go2UVM product
// Thanks for using VerifWorks products, see http://www.verifworks.com for more

import uvm_pkg::*;
`include "uvm_macros.svh"
// Import Go2UVM Package
import vw_go2uvm_pkg::*;
// Use the base class provided by the vw_go2uvm_pkg
class recursive_test extends go2uvm_base_test;
  // Create a handle to the actual interface
  virtual recursive_if vif;
  task reset;
    `uvm_info (log_id, "Start of reset", UVM_MEDIUM)
   // `uvm_info (log_id, "Fill in your reset logic here ", UVM_MEDIUM)
     this.vif.cb.reset_n <= 1'b0;
     repeat (5) @ (this.vif.cb);
     this.vif.cb.reset_n <= 1'b1;
     repeat (1) @ (this.vif.cb);
    `uvm_info (log_id, "End of reset", UVM_MEDIUM)
  endtask : reset
  task main ();
    `uvm_info (log_id, "Start of main", UVM_MEDIUM)
   // `uvm_info (log_id, "Fill in your main logic here ", UVM_MEDIUM)
	@(vif.cb);
	  begin
	    @(vif.cb);
		vif.cb.req <= 1'b1;
		vif.cb.ack <= 1'b1;
	//	vif.cb.p <= 1'b1;
	    @(vif.cb);
	    @(vif.cb);
	    @(vif.cb);
	    @(vif.cb);
	    @(vif.cb);
		vif.cb.ack <= 1'b0;
	  end

#250 $finish; 
    `uvm_info (log_id, "End of main", UVM_MEDIUM)
  endtask : main
endclass : recursive_test

module recursive_go2uvm;
  timeunit 1ns;
  timeprecision 1ns;
  parameter VW_CLK_PERIOD = 10;

  // Simple clock generator
  bit clk ;
  always # (VW_CLK_PERIOD/2) clk <= ~clk;

  // Interface instance
  recursive_if recursive_if_0 (.*);

  // Connect TB clk to Interface instance clk

  // DUT instance
  recursive recursive_0 (.clk(clk),
                    .req(recursive_if_0.req),
                    .ack(recursive_if_0.ack),
                    .done(recursive_if_0.done),                  
                    .parity_error(recursive_if_0.parity_error),
		    .reset_n(recursive_if_0.reset_n));


  // Using VW_Go2UVM
  recursive_test recursive_test_0;
  initial begin : go2uvm_test
    recursive_test_0 = new ();
    // Connect virtual interface to physical interface
    recursive_test_0.vif = recursive_if_0;
    // Kick start standard UVM phasing
    run_test ();
  end : go2uvm_test
endmodule : recursive_go2uvm

